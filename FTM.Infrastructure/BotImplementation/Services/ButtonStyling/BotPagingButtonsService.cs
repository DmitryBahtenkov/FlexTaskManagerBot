using FTM.Domain.Models.IssueModel;
using FTM.Domain.Units;
using Telegram.Bot.Types.ReplyMarkups;

namespace FTM.Infrastructure.BotImplementation.Services.ButtonStyling;

class BotPagingButtons
{
    #region –û—Ñ—Ñ—Å–µ—Ç –æ—Ç –Ω–µ—á–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –ø–µ—Ä–≤–æ–π –≤ –ø–∞–Ω–µ–ª–∏

    // –†–∞–Ω–∫ –Ω–µ—á–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∞–Ω–µ–ª–∏ (—Å 6—é —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
    private const double middleOddPage = 11 % 6;
    private const double lastOddPage = 13 % 6;

    // –û—Ñ—Ñ—Å–µ—Ç —Ä–∞–Ω–∫–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –≤ –ø–∞–Ω–µ–ª–∏(—Å 6—é —Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
    private const int firstRankOffset = 0;
    private const int middleRankOffset = 2;
    private const int lastRankOffset = 4;

    #endregion

    public static InlineKeyboardMarkup GetForPaging(PagingResult<Issue> issues, InlineKeyboardButton? backButton = null)
    {
        var buttons = new List<List<InlineKeyboardButton>>();

        foreach (var issue in issues.Items)
        {
            var issueName = issue.Status == IssueStatus.Finished ? "‚úÖ " + issue.Text : issue.Text;
            var infoButton = InlineKeyboardButton.WithCallbackData(issueName, "info#" + issue.Id);
            var doneButton = issue.Status is not IssueStatus.Finished
                ? InlineKeyboardButton.WithCallbackData("‚úÖ", "done#" + issue.Id)
                : null;
            var editButton = InlineKeyboardButton.WithCallbackData("‚úè", "edit#" + issue.Id);
            var deleteButton = InlineKeyboardButton.WithCallbackData("‚ùå", "delete#" + issue.Id);

            buttons.Add(new List<InlineKeyboardButton> { infoButton });
            buttons.Add(doneButton is null
                ? new List<InlineKeyboardButton> { editButton, deleteButton }
                : new List<InlineKeyboardButton> { doneButton, editButton, deleteButton });
        }

        if (backButton is not null)
        {
            buttons.Add(new List<InlineKeyboardButton>(1)
            {
                backButton
            });
        }

        if (issues.TotalPages > 1)
        {
            var paging = new List<InlineKeyboardButton>();

            var panelStartPage = 1;
            var panelMaxBtnCount = 7; // –ù–∞ 1–æ–π –ø–∞–Ω–µ–ª–∏ _7_ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–ø–µ—Ä–µ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            var panelLastPage = Math.Min(panelMaxBtnCount, issues.TotalPages);

            if (issues.CurrentPage > 7)
            {
                var isOddPage = 1;

                // –ù–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞–Ω–µ–ª—è—Ö (–æ—Ç 8 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç.–¥.) _6_ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, —Ç.–∫. –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                panelMaxBtnCount = 6;

                panelStartPage = issues.CurrentPage;
                if (issues.CurrentPage % 2 == 0)
                {
                    panelStartPage++;
                    isOddPage--;
                }

                var offsetTillStart = firstRankOffset;
                var pageRank = panelStartPage % panelMaxBtnCount; 

                if (pageRank == middleOddPage)
                {
                    offsetTillStart = middleRankOffset;
                }
                else if (pageRank == lastOddPage)
                {
                    offsetTillStart = lastRankOffset;
                }

                panelStartPage = issues.CurrentPage - isOddPage - offsetTillStart;

                panelLastPage = Math.Min(issues.TotalPages, panelStartPage + panelMaxBtnCount - 1);

                // –ù–æ–≤–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–∑–∞–¥ - 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞–Ω–µ–ª–∏
                var downPagePanel = panelStartPage - panelMaxBtnCount;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1 –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π –ø–∞–Ω–µ–ª–∏, –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å 2–π –ø–∞–Ω–µ–ª–∏ (8-14 —Å—Ç—Ä.) –Ω–∞ 1—É—é (1-7 —Å—Ç—Ä.)
                if (panelStartPage is 8)
                {
                    downPagePanel--;
                }

                paging.Add(InlineKeyboardButton.WithCallbackData("‚¨Ö", $"taskpaging#{downPagePanel}"));
            }


            for (var i = panelStartPage; i <= panelLastPage; i++)
            {
                if (issues.CurrentPage != i)
                {
                    paging.Add(InlineKeyboardButton.WithCallbackData((i).ToString(), $"taskpaging#{i}"));
                }
                else
                {
                    paging.Add(InlineKeyboardButton.WithCallbackData("üëÄ", $"taskpaging#{i}"));
                }
            }

            if (issues.TotalPages - panelLastPage > 0)
            {
                paging.Add(InlineKeyboardButton.WithCallbackData("‚û°", $"taskpaging#{panelLastPage + 1}"));
            }

            buttons.Add(paging);
        }

        return new InlineKeyboardMarkup(buttons);
    }
}